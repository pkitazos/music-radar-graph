// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Content refers to either an Album or an individual Track
model Media {
    mediaID       String          @id @default(cuid()) @map("contentId")
    name          String
    imageURL      String
    graphTemplate GraphTemplate[]
    graphInstance GraphInstance[]
}

enum Visibility {
    PUBLIC
    PRIVATE
    UNLISTED
}

// information about a particular field
model FieldTemplate {
    ID              String          @id @default(cuid())
    fieldIndex      Int
    name            String
    for             GraphTemplate   @relation(fields: [graphTemplateID], references: [ID])
    graphTemplateID String
    field           FieldInstance[]

    @@index([graphTemplateID])
    @@map("TemplateField")
}

model FieldInstance {
    ID              String        @id @default(cuid())
    for             GraphInstance @relation(fields: [graphInstanceID], references: [ID])
    graphInstanceID String
    value           Float
    field           FieldTemplate @relation(fields: [fieldID], references: [ID])
    fieldID         String

    @@index([graphInstanceID])
    @@index([fieldID])
    @@map("FieldValue")
}

model GraphTemplate {
    ID             String          @id @default(cuid())
    media          Media           @relation(fields: [mediaID], references: [mediaID])
    mediaID        String
    maxValue       Int
    visibility     Visibility
    templateFields FieldTemplate[]
    owner          User            @relation(fields: [ownerID], references: [id])
    ownerID        String
    graphInstance  GraphInstance[]
    featured       Boolean         @default(false)

    @@index([ownerID])
    @@index([mediaID])
}

model GraphInstance {
    ID              String          @id @default(cuid())
    media           Media           @relation(fields: [mediaID], references: [mediaID])
    mediaID         String
    for             GraphTemplate   @relation(fields: [graphTemplateID], references: [ID])
    graphTemplateID String
    values          FieldInstance[]
    submitter       User?           @relation(fields: [submitterID], references: [id])
    submitterID     String?

    @@unique([graphTemplateID, submitterID], name: "instanceIdentifier")
    @@index([graphTemplateID])
    @@index([submitterID])
    @@index([mediaID])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String?         @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    graphTemplate GraphTemplate[]
    graphInstance GraphInstance[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
